---
const categories = [
  "All Categories",
  "Electronics",
  "Clothing",
  "Home & Garden",
  "Automotive",
  "Sports & Outdoors",
  "Health & Beauty",
  "Toys & Games",
  "Industrial"
];
---

<header class="w-full bg-white shadow-sm py-4 md:py-0 md:h-[10vh] flex items-center px-4 md:px-6">
  <div class="container mx-auto flex flex-col md:flex-row items-center justify-between gap-4 md:gap-0">
    <a href="/" class="text-[var(--primary-blue)] font-bold text-xl md:text-2xl flex items-center gap-2">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
      </svg>
      FactoryLeak
    </a>

    <div class="flex-1 w-full md:max-w-3xl md:mx-8">
      <div class="flex">
        <select class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-l-lg focus:ring-blue-500 focus:border-blue-500 block p-2.5 w-40">
          {categories.map(category => (
            <option value={category}>{category}</option>
          ))}
        </select>
        <div class="relative flex-1">
          <input type="search" class="block w-full p-2.5 text-sm text-gray-900 border border-l-0 border-gray-300 bg-gray-50 focus:ring-blue-500 focus:border-blue-500 rounded-r-lg" placeholder="Search for products, factories..." />
          <button class="absolute right-0 top-0 h-full px-4 text-[var(--primary-blue)]">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
          </button>
        </div>
      </div>
    </div>

    <!-- Mobile menu button -->
    <button id="mobileMenuBtn" class="md:hidden text-gray-600 hover:text-[var(--primary-blue)]">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
      </svg>
    </button>

    <!-- Mobile menu -->
    <div id="mobileMenu" class="fixed inset-0 bg-gray-800 bg-opacity-75 z-50 hidden md:hidden">
      <div class="fixed right-0 top-0 h-full w-64 bg-white shadow-xl">
        <div class="p-4">
          <button id="closeMobileMenu" class="absolute top-4 right-4 text-gray-600 hover:text-gray-900">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
          <div class="mt-8">
            <a href="/favorites" class="block py-2.5 text-gray-600 hover:text-[var(--primary-blue)]">Favorites</a>
            <div id="mobileLoggedOutMenu" class="border-t mt-2 pt-2">
              <a href="/factory/login" class="block py-2.5 text-gray-600 hover:text-[var(--primary-blue)]">Factory Login</a>
              <a href="/factory/register" class="block py-2.5 text-gray-600 hover:text-[var(--primary-blue)]">Register Factory</a>
            </div>
            <div id="mobileLoggedInMenu" class="hidden border-t mt-2 pt-2">
              <a href="/factory/dashboard" class="block py-2.5 text-gray-600 hover:text-[var(--primary-blue)]">Factory Dashboard</a>
              <button id="mobileLogoutBtn" class="w-full text-left py-2.5 text-gray-600 hover:text-[var(--primary-blue)]">Logout</button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Desktop menu -->
    <div class="hidden md:flex items-center gap-6">
      <a href="/favorites" class="text-gray-600 hover:text-[var(--primary-blue)]">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
        </svg>
      </a>
      <div class="relative">
        <button id="profileButton" class="flex items-center gap-2 text-gray-600 hover:text-[var(--primary-blue)]">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 21v-2a4 4 0 00-4-4H8a4 4 0 00-4 4v2" />
            <circle cx="12" cy="7" r="4" />
          </svg>
        </button>
        <div id="profileDropdown" class="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 hidden z-50">
          <div id="loggedOutMenu">
            <a href="/factory/login" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Factory Login</a>
            <a href="/factory/register" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Register Factory</a>
          </div>
          <div id="loggedInMenu" class="hidden">
            <a href="/factory/dashboard" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Factory Dashboard</a>
            <button id="logoutBtn" class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Logout</button>
          </div>
        </div>
      </div>

<script>
const profileButton = document.getElementById('profileButton');
const profileDropdown = document.getElementById('profileDropdown');
const loggedOutMenu = document.getElementById('loggedOutMenu');
const loggedInMenu = document.getElementById('loggedInMenu');
const logoutBtn = document.getElementById('logoutBtn');

let hideTimeout: number;

// Toggle dropdown
const toggleDropdown = (show: boolean) => {
  if (show) {
    clearTimeout(hideTimeout);
    profileDropdown?.classList.remove('hidden');
  } else {
    hideTimeout = setTimeout(() => {
      profileDropdown?.classList.add('hidden');
    }, 200);
  }
};

let isDropdownOpen = false;

// Event listeners for dropdown
if (window.matchMedia('(hover: hover)').matches) {
  // Device has hover capability (desktop)
  profileButton?.addEventListener('mouseenter', () => toggleDropdown(true));
  profileDropdown?.addEventListener('mouseenter', () => toggleDropdown(true));
  profileDropdown?.addEventListener('mouseleave', () => toggleDropdown(false));
  profileButton?.addEventListener('mouseleave', (e) => {
    // Check if mouse is not moving to the dropdown
    const rect = profileDropdown?.getBoundingClientRect();
    if (rect) {
      const isMovingToDropdown = e.clientY >= rect.top && 
                                e.clientX >= rect.left && 
                                e.clientX <= rect.right;
      if (!isMovingToDropdown) {
        toggleDropdown(false);
      }
    }
  });
} else {
  // Touch device (mobile)
  profileButton?.addEventListener('click', (e) => {
    e.stopPropagation();
    isDropdownOpen = !isDropdownOpen;
    toggleDropdown(isDropdownOpen);
  });

  // Close dropdown when clicking outside
  document.addEventListener('click', (e) => {
    if (isDropdownOpen && !profileDropdown?.contains(e.target as Node)) {
      isDropdownOpen = false;
      toggleDropdown(false);
    }
  });
}

// Check authentication status
const checkAuth = () => {
  const token = localStorage.getItem('factoryToken');
  if (token) {
    loggedOutMenu?.classList.add('hidden');
    loggedInMenu?.classList.remove('hidden');
  } else {
    loggedOutMenu?.classList.remove('hidden');
    loggedInMenu?.classList.add('hidden');
  }
};

// Handle logout
logoutBtn?.addEventListener('click', () => {
  localStorage.removeItem('factoryToken');
  checkAuth();
  window.location.href = '/';
});

// Mobile menu functionality
const mobileMenuBtn = document.getElementById('mobileMenuBtn');
const mobileMenu = document.getElementById('mobileMenu');
const closeMobileMenu = document.getElementById('closeMobileMenu');
const mobileLoggedOutMenu = document.getElementById('mobileLoggedOutMenu');
const mobileLoggedInMenu = document.getElementById('mobileLoggedInMenu');
const mobileLogoutBtn = document.getElementById('mobileLogoutBtn');

const toggleMobileMenu = (show: boolean) => {
  if (show) {
    mobileMenu?.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
  } else {
    mobileMenu?.classList.add('hidden');
    document.body.style.overflow = '';
  }
};

mobileMenuBtn?.addEventListener('click', () => toggleMobileMenu(true));
closeMobileMenu?.addEventListener('click', () => toggleMobileMenu(false));
mobileMenu?.addEventListener('click', (e) => {
  if (e.target === mobileMenu) {
    toggleMobileMenu(false);
  }
});

// Update mobile menu auth state
const updateMobileMenuAuth = () => {
  const token = localStorage.getItem('factoryToken');
  if (token) {
    mobileLoggedOutMenu?.classList.add('hidden');
    mobileLoggedInMenu?.classList.remove('hidden');
  } else {
    mobileLoggedOutMenu?.classList.remove('hidden');
    mobileLoggedInMenu?.classList.add('hidden');
  }
};

mobileLogoutBtn?.addEventListener('click', () => {
  localStorage.removeItem('factoryToken');
  updateMobileMenuAuth();
  window.location.href = '/';
});

// Check auth status on page load
document.addEventListener('DOMContentLoaded', () => {
  checkAuth();
  updateMobileMenuAuth();
});
</script>
