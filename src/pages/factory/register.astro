---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="Factory Registration">
  <div class="min-h-screen bg-gray-100 py-6 flex flex-col justify-center sm:py-12">
    <div class="relative py-3 sm:max-w-xl sm:mx-auto">
      <div class="relative px-4 py-10 bg-white mx-8 md:mx-0 shadow rounded-3xl sm:p-10">
        <div class="max-w-md mx-auto">
          <div class="divide-y divide-gray-200">
            <div class="py-8 text-base leading-6 space-y-4 text-gray-700 sm:text-lg sm:leading-7">
              <h2 class="text-2xl font-bold mb-8 text-center">Factory Registration</h2>
              <form id="registerForm" class="space-y-4">
                <div>
                  <label for="name" class="block text-sm font-medium text-gray-700">Factory Name</label>
                  <input type="text" id="name" name="name" required minlength="2"
                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
                    placeholder="Enter factory name">
                </div>
                <div>
                  <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
                  <input type="email" id="email" name="email" required
                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
                    placeholder="email@example.com">
                </div>
                <div>
                  <label for="password" class="block text-sm font-medium text-gray-700">Password</label>
                  <input type="password" id="password" name="password" required minlength="6"
                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
                    placeholder="Minimum 6 characters">
                </div>
                <div>
                  <label for="location" class="block text-sm font-medium text-gray-700">Location</label>
                  <input type="text" id="location" name="location" required minlength="2"
                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
                    placeholder="City, Country">
                </div>
                <div>
                  <label for="description" class="block text-sm font-medium text-gray-700">Description</label>
                  <textarea id="description" name="description" rows="3"
                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
                    placeholder="Brief description of your factory"></textarea>
                </div>
                <div class="pt-4">
                  <button type="submit" 
                    class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    Register
                  </button>
                </div>
                <div id="message" class="mt-4 text-center hidden"></div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

<script>
const registerForm = document.getElementById('registerForm') as HTMLFormElement;
const messageDiv = document.getElementById('message') as HTMLDivElement;

if (!registerForm || !messageDiv) {
  console.error('Required elements not found');
} else {
  registerForm.addEventListener('submit', async (e: SubmitEvent) => {
    e.preventDefault();
    
    messageDiv.className = 'mt-4 text-center';
    messageDiv.style.display = 'block';
    
    try {
      // Reset any previous error states
      document.querySelectorAll('input, textarea').forEach(el => {
        el.classList.remove('border-red-500');
      });
      
      messageDiv.textContent = 'Registering...';
      messageDiv.className = 'mt-4 text-center text-blue-600';

      const formData = new FormData(e.target as HTMLFormElement);
      const data = {
        name: formData.get('name'),
        email: formData.get('email'),
        password: formData.get('password'),
        location: formData.get('location'),
        description: formData.get('description')
      };

      console.log('Sending registration request with data:', { ...data, password: '***' });

      try {
        // Test server connection first
        try {
          const testResponse = await fetch('http://localhost:5000/api/test', {
            credentials: 'include'
          });
          const testResult = await testResponse.json();
          console.log('Test response:', testResult);
        } catch (testError) {
          console.error('Test connection failed:', testError);
          throw new Error('Could not connect to server. Please check if the server is running.');
        }
        
        const response = await fetch('http://localhost:5000/api/auth/register', {
          method: 'POST',
          credentials: 'include',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify(data)
        });

        console.log('Response status:', response.status);
        console.log('Response headers:', Object.fromEntries(response.headers.entries()));
        
        const text = await response.text();
        console.log('Raw response:', text);
        
        let result;
        try {
          result = JSON.parse(text);
          console.log('Parsed response:', result);
        } catch (e) {
          console.error('Failed to parse JSON:', e);
          throw new Error('Invalid response format from server');
        }

        if (response.ok && result.token) {
          messageDiv.textContent = 'Registration successful! Redirecting to dashboard...';
          messageDiv.className = 'mt-4 text-center text-green-600';
          localStorage.setItem('factoryToken', result.token);
          setTimeout(() => {
            window.location.href = '/factory/dashboard';
          }, 2000);
        } else {
          throw new Error(result.error || 'Registration failed');
        }
      } catch (error: unknown) {
        console.error('Network error:', error);
        if (error instanceof Error) {
          throw new Error(`Network error: ${error.message}`);
        } else {
          throw new Error('Network error: Failed to connect to server');
        }
      }
    } catch (error) {
      console.error('Registration error:', error);
      
      // Handle validation errors
      if (error instanceof Error && error.message.includes('validation failed')) {
        messageDiv.textContent = 'Please check the form for errors';
        // Highlight invalid fields
        const fields = ['name', 'email', 'password', 'location'];
        fields.forEach(field => {
          const input = document.getElementById(field) as HTMLInputElement;
          if (input && !input.checkValidity()) {
            input.classList.add('border-red-500');
          }
        });
      } else if (error instanceof Error) {
        messageDiv.textContent = `Error: ${error.message}`;
      } else {
        messageDiv.textContent = 'An unexpected error occurred. Please check the console for details.';
      }
      messageDiv.className = 'mt-4 text-center text-red-600';
    }
  });
}
</script>
</Layout>
